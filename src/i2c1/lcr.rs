///Register `LCR` reader
pub type R = crate::R<LCRrs>;
///Register `LCR` writer
pub type W = crate::W<LCRrs>;
///Field `SLV` reader - Decrementer Load value for Standard Mode SCL (master mode) for both high and low phase. Data rate is generated as Ffclk/(SLV+max(SLV,CNT*2+6)+7+DNF) approximately. 100kbps data rate is generated by default if fclk is 48MHz. SLV also controls setup time and hold time for START and STOP condition in Standard Mode(master mode). Thdsta=Tsusta=Tsusto=Tfclk*SLV
pub type SlvR = crate::FieldReader<u16>;
///Field `SLV` writer - Decrementer Load value for Standard Mode SCL (master mode) for both high and low phase. Data rate is generated as Ffclk/(SLV+max(SLV,CNT*2+6)+7+DNF) approximately. 100kbps data rate is generated by default if fclk is 48MHz. SLV also controls setup time and hold time for START and STOP condition in Standard Mode(master mode). Thdsta=Tsusta=Tsusto=Tfclk*SLV
pub type SlvW<'a, REG> = crate::FieldWriter<'a, REG, 9, u16>;
///Field `FLV` reader - Decrementer Load value for Fast Mode (or Fast Mode Plus) SCL (master mode) for both high and low phase. Data rate is generated as Ffclk/(FLV+max(FLV,CNT*2+6)+7+DNF) approximately. 400kbps data rate is generated by default if fclk is 48MHz. FLV also controls setup time and hold time for START and STOP condition in Fast Mode(master mode). Thdsta=Tsusta=Tsusto=Tfclk*FLV
pub type FlvR = crate::FieldReader<u16>;
///Field `FLV` writer - Decrementer Load value for Fast Mode (or Fast Mode Plus) SCL (master mode) for both high and low phase. Data rate is generated as Ffclk/(FLV+max(FLV,CNT*2+6)+7+DNF) approximately. 400kbps data rate is generated by default if fclk is 48MHz. FLV also controls setup time and hold time for START and STOP condition in Fast Mode(master mode). Thdsta=Tsusta=Tsusto=Tfclk*FLV
pub type FlvW<'a, REG> = crate::FieldWriter<'a, REG, 9, u16>;
///Field `HLVL` reader - Decrementer Load value for High Speed Mode SCL (master mode) for low phase. Tlow=Tfclk*(HLVL+3+DNF). Data rate is generated as 1/(Thigh+Tlow), or Ffclk/(HLVH+HLVL+7+2*DNF). 3.2Mbps data rate is generated by default if fclk is 48MHz. HLVL also controls setup time and hold time for START and STOP condition in High Speed Mode(master mode). Thdsta=Tsusta=Tsusto=Tfclk*(HLVL+1)
pub type HlvlR = crate::FieldReader<u16>;
///Field `HLVL` writer - Decrementer Load value for High Speed Mode SCL (master mode) for low phase. Tlow=Tfclk*(HLVL+3+DNF). Data rate is generated as 1/(Thigh+Tlow), or Ffclk/(HLVH+HLVL+7+2*DNF). 3.2Mbps data rate is generated by default if fclk is 48MHz. HLVL also controls setup time and hold time for START and STOP condition in High Speed Mode(master mode). Thdsta=Tsusta=Tsusto=Tfclk*(HLVL+1)
pub type HlvlW<'a, REG> = crate::FieldWriter<'a, REG, 9, u16>;
///Field `HLVH` reader - Decrementer Load value for High Speed Mode SCL (master mode) for high phase. Thigh=Tfclk*(HLVH+4+DNF)
pub type HlvhR = crate::FieldReader;
///Field `HLVH` writer - Decrementer Load value for High Speed Mode SCL (master mode) for high phase. Thigh=Tfclk*(HLVH+4+DNF)
pub type HlvhW<'a, REG> = crate::FieldWriter<'a, REG, 5>;
impl R {
    ///Bits 0:8 - Decrementer Load value for Standard Mode SCL (master mode) for both high and low phase. Data rate is generated as Ffclk/(SLV+max(SLV,CNT*2+6)+7+DNF) approximately. 100kbps data rate is generated by default if fclk is 48MHz. SLV also controls setup time and hold time for START and STOP condition in Standard Mode(master mode). Thdsta=Tsusta=Tsusto=Tfclk*SLV
    #[inline(always)]
    pub fn slv(&self) -> SlvR {
        SlvR::new((self.bits & 0x01ff) as u16)
    }
    ///Bits 9:17 - Decrementer Load value for Fast Mode (or Fast Mode Plus) SCL (master mode) for both high and low phase. Data rate is generated as Ffclk/(FLV+max(FLV,CNT*2+6)+7+DNF) approximately. 400kbps data rate is generated by default if fclk is 48MHz. FLV also controls setup time and hold time for START and STOP condition in Fast Mode(master mode). Thdsta=Tsusta=Tsusto=Tfclk*FLV
    #[inline(always)]
    pub fn flv(&self) -> FlvR {
        FlvR::new(((self.bits >> 9) & 0x01ff) as u16)
    }
    ///Bits 18:26 - Decrementer Load value for High Speed Mode SCL (master mode) for low phase. Tlow=Tfclk*(HLVL+3+DNF). Data rate is generated as 1/(Thigh+Tlow), or Ffclk/(HLVH+HLVL+7+2*DNF). 3.2Mbps data rate is generated by default if fclk is 48MHz. HLVL also controls setup time and hold time for START and STOP condition in High Speed Mode(master mode). Thdsta=Tsusta=Tsusto=Tfclk*(HLVL+1)
    #[inline(always)]
    pub fn hlvl(&self) -> HlvlR {
        HlvlR::new(((self.bits >> 18) & 0x01ff) as u16)
    }
    ///Bits 27:31 - Decrementer Load value for High Speed Mode SCL (master mode) for high phase. Thigh=Tfclk*(HLVH+4+DNF)
    #[inline(always)]
    pub fn hlvh(&self) -> HlvhR {
        HlvhR::new(((self.bits >> 27) & 0x1f) as u8)
    }
}
impl core::fmt::Debug for R {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LCR")
            .field("hlvh", &self.hlvh())
            .field("hlvl", &self.hlvl())
            .field("flv", &self.flv())
            .field("slv", &self.slv())
            .finish()
    }
}
impl W {
    ///Bits 0:8 - Decrementer Load value for Standard Mode SCL (master mode) for both high and low phase. Data rate is generated as Ffclk/(SLV+max(SLV,CNT*2+6)+7+DNF) approximately. 100kbps data rate is generated by default if fclk is 48MHz. SLV also controls setup time and hold time for START and STOP condition in Standard Mode(master mode). Thdsta=Tsusta=Tsusto=Tfclk*SLV
    #[inline(always)]
    pub fn slv(&mut self) -> SlvW<LCRrs> {
        SlvW::new(self, 0)
    }
    ///Bits 9:17 - Decrementer Load value for Fast Mode (or Fast Mode Plus) SCL (master mode) for both high and low phase. Data rate is generated as Ffclk/(FLV+max(FLV,CNT*2+6)+7+DNF) approximately. 400kbps data rate is generated by default if fclk is 48MHz. FLV also controls setup time and hold time for START and STOP condition in Fast Mode(master mode). Thdsta=Tsusta=Tsusto=Tfclk*FLV
    #[inline(always)]
    pub fn flv(&mut self) -> FlvW<LCRrs> {
        FlvW::new(self, 9)
    }
    ///Bits 18:26 - Decrementer Load value for High Speed Mode SCL (master mode) for low phase. Tlow=Tfclk*(HLVL+3+DNF). Data rate is generated as 1/(Thigh+Tlow), or Ffclk/(HLVH+HLVL+7+2*DNF). 3.2Mbps data rate is generated by default if fclk is 48MHz. HLVL also controls setup time and hold time for START and STOP condition in High Speed Mode(master mode). Thdsta=Tsusta=Tsusto=Tfclk*(HLVL+1)
    #[inline(always)]
    pub fn hlvl(&mut self) -> HlvlW<LCRrs> {
        HlvlW::new(self, 18)
    }
    ///Bits 27:31 - Decrementer Load value for High Speed Mode SCL (master mode) for high phase. Thigh=Tfclk*(HLVH+4+DNF)
    #[inline(always)]
    pub fn hlvh(&mut self) -> HlvhW<LCRrs> {
        HlvhW::new(self, 27)
    }
}
///Load Count Register
///
///You can [`read`](crate::Reg::read) this register and get [`lcr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`lcr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).
pub struct LCRrs;
impl crate::RegisterSpec for LCRrs {
    type Ux = u32;
}
///`read()` method returns [`lcr::R`](R) reader structure
impl crate::Readable for LCRrs {}
///`write(|w| ..)` method takes [`lcr::W`](W) writer structure
impl crate::Writable for LCRrs {
    type Safety = crate::Unsafe;
    const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
    const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
}
///`reset()` method sets LCR to value 0x081c_72ed
impl crate::Resettable for LCRrs {
    const RESET_VALUE: u32 = 0x081c_72ed;
}
